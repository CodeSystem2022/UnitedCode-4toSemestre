package UTN.datos;

import UTN.Conexion.Conexion;
import UTN.dominio.Estudiante;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class EstudianteDAO {
    public EstudianteDAO() {
    }

    public List<Estudiante> listarEstudiantes() {
        List<Estudiante> estudiantes = new ArrayList();
        Connection con = Conexion.getConnection();
        String sql = "SELECT * FROM estudiantes2022 ORDER BY idestudiantes2022";

        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while(rs.next()) {
                Estudiante estudiante = new Estudiante();
                estudiante.setIdEstudiantes(rs.getInt("idestudiantes2022"));
                estudiante.setNombre(rs.getString("Nombre"));
                estudiante.setApellido(rs.getString("Apellido"));
                estudiante.setTelefono(rs.getString("email"));
                estudiantes.add(estudiante);
            }
        } catch (Exception var15) {
            System.out.println("Ocurrio un error al seleccionar datos " + var15.getMessage());
        } finally {
            try {
                con.close();
            } catch (Exception var14) {
                System.out.println("Ocurrio un error al cerrar la conexion: " + var14.getMessage());
            }

        }

        return estudiantes;
    }

    public boolean buscarEstudiantePorId(Estudiante estudiante) {
        Connection con = Conexion.getConnection();
        String sql = "SELECT * FROM estudiantes2022 WHERE idestudiantes2022=?";

        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setInt(1, estudiante.getIdEstudiantes());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                estudiante.setNombre(rs.getString("nombre"));
                estudiante.setApellido(rs.getString("apellido"));
                estudiante.setTelefono(rs.getString("telefono"));
                estudiante.setTelefono(rs.getString("email"));
                boolean var6 = true;
                return var6;
            }
        } catch (Exception var17) {
            System.out.println("Ocurrio un error al buscar estudiante: " + var17.getMessage());
        } finally {
            try {
                con.close();
            } catch (Exception var16) {
                System.out.println("Ocurrio un error al cerrar la conexion: " + var16.getMessage());
            }

        }

        return false;
    }

    public boolean agregarEstudiante(Estudiante estudiante) {
        Connection con = Conexion.getConnection();
        String sql = "Insert INTO estudiantes2022 (nombre, apellido, telefono, email) VALUES (?, ?, ?, ?)";

        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, estudiante.getNombre());
            ps.setString(2, estudiante.getApellido());
            ps.setString(3, estudiante.getTelefono());
            ps.setString(4, estudiante.getEmail());
            ps.execute();
            boolean var5 = true;
            return var5;
        } catch (Exception var15) {
            System.out.println("Ocurrio un error al agregar estudiante: " + var15.getMessage());
        } finally {
            try {
                con.close();
            } catch (Exception var14) {
                System.out.println("Erro al cerrar la conexion: " + var14.getMessage());
            }

        }

        return false;
    }

    public boolean modificarEstudiante(Estudiante estudiante) {
        Connection con = Conexion.getConnection();
        String sql = "UPDATE estudiantes2022 SET nombre=?, apellido=?, telefono=?, email=? WHERE idestudiante2022=?";

        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, estudiante.getNombre());
            ps.setString(2, estudiante.getApellido());
            ps.setString(3, estudiante.getTelefono());
            ps.setString(4, estudiante.getEmail());
            ps.setInt(5, estudiante.getIdEstudiantes());
            ps.execute();
            boolean var5 = true;
            return var5;
        } catch (Exception var15) {
            System.out.printf("Error al modificar el estudiante " + var15.getMessage());
        } finally {
            try {
                con.close();
            } catch (Exception var14) {
                System.out.printf("Error al cerrar la conexion: " + var14.getMessage());
            }

        }

        return false;
    }

    public boolean eliminarEstudiante(Estudiante estudiante) {
        Connection con = Conexion.getConnection();
        String sql = "Delete FROM estudiante2022 WHERE idestudiante2022=?";

        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setInt(1, estudiante.getIdEstudiantes());
            ps.execute();
            boolean var5 = true;
            return var5;
        } catch (Exception var15) {
            System.out.printf("Error al tratar de eliminar al estudiante: " + var15.getMessage());
        } finally {
            try {
                con.close();
            } catch (Exception var14) {
                System.out.println("Error al cerrar la conexion: " + var14.getMessage());
            }

        }

        return false;
    }

    public static void main(String[] args) {
        EstudianteDAO estudianteDao = new EstudianteDAO();
        Estudiante nuevoEstudiante = new Estudiante("Carlos", "Lara", "2604435676", "carloslara@gmail.com");
        boolean agregado = estudianteDao.agregarEstudiante(nuevoEstudiante);
        if (agregado) {
            System.out.println("Estudiante agregado: " + String.valueOf(nuevoEstudiante));
        } else {
            System.out.printf("No se ha agregado estudiante: " + String.valueOf(nuevoEstudiante));
        }

        System.out.println("Listado de estudiantes ");
        List<Estudiante> estudiantes = estudianteDao.listarEstudiantes();
        PrintStream var10001 = System.out;
        Objects.requireNonNull(var10001);
        estudiantes.forEach(var10001::println);
    }
}
